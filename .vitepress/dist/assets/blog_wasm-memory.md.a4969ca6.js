import{_ as e}from"./chunks/me.1cb41795.js";import{_ as a,o as t,c as r,O as s}from"./chunks/framework.571309da.js";const m="/assets/wasm-memory.e7f04287.png",u=JSON.parse('{"title":"wasm内存模型","description":"","frontmatter":{},"headers":[],"relativePath":"blog/wasm-memory.md","filePath":"blog/wasm-memory.md"}'),i={name:"blog/wasm-memory.md"},l=s('<div style="overflow:hidden;"><img src="'+e+'" alt="风起" style="border-radius:50%;width:25px;float:left;"> <div style="float:left;margin-top:2px;margin-left:3px;font-size:12px;">风起</div></div><div style="clear:both;font-size:12px;height:50px;line-height:34px;">2023-06-24</div><h1 id="wasm内存模型" tabindex="-1">wasm内存模型 <a class="header-anchor" href="#wasm内存模型" aria-label="Permalink to &quot;wasm内存模型&quot;">​</a></h1><p><img src="'+m+'" alt=""></p><h2 id="wasm内存模型-1" tabindex="-1">wasm内存模型： <a class="header-anchor" href="#wasm内存模型-1" aria-label="Permalink to &quot;wasm内存模型：&quot;">​</a></h2><p>wasm是一种栈式虚拟机，没有寄存器的概念，所有操作数都放在运行时的栈上。内存分为托管堆栈和非托管堆栈。</p><p>我们将线性内存中由编译器组织的堆栈称为“非托管堆栈(unmanaged memory)”，非托管堆栈可以暴露给外部供js读写访问。</p><p>其余的是“托管堆栈(managed memory)”，托管堆栈不受用户控制。</p><h2 id="js与wasm传参" tabindex="-1">js与wasm传参： <a class="header-anchor" href="#js与wasm传参" aria-label="Permalink to &quot;js与wasm传参：&quot;">​</a></h2><p>设计原则：</p><ul><li><p>最小化复制</p></li><li><p>最小化序列化</p></li></ul><p>在Rust侧将中大型长期存在的数据结构暴露指针给js，同时暴露出相关的操作函数，js通过调用这些函数并传入相关数据结构的指针，由函数内部执行复杂的运算，最终返回一个最小化的可复制的结果供js使用。</p><p><em>参考文献：</em></p><ul><li><em><a href="https://www.infoq.cn/article/jds0wdtz7dsugzpc81hs" target="_blank" rel="noreferrer">WebAssembly 的核心语言特性与未来发展</a></em></li><li><em><a href="https://news.ycombinator.com/item?id=24220630" target="_blank" rel="noreferrer">wasm shadow stack</a></em></li><li><em><a href="https://rustmagazine.github.io/rust_magazine_2021/chapter_6/webassmebly-security.html" target="_blank" rel="noreferrer">华为 | WebAssembly 安全性调研</a></em></li><li><em><a href="https://juejin.cn/post/7080152136717336590" target="_blank" rel="noreferrer">【译】WebAssembly中的内存（为什么比你想象的更安全）</a></em></li><li><em><a href="https://excitedspider.github.io/WASM%E6%A0%88%E5%BC%8F%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A8%A1%E5%9E%8B/" target="_blank" rel="noreferrer">浅谈WASM栈式虚拟机模型</a></em></li><li><em><a href="https://juejin.cn/post/6983105166845149221" target="_blank" rel="noreferrer">创建并使用WebAssembly模块</a></em></li></ul>',14),o=[l];function n(p,h,d,_,c,f){return t(),r("div",null,o)}const g=a(i,[["render",n]]);export{u as __pageData,g as default};
